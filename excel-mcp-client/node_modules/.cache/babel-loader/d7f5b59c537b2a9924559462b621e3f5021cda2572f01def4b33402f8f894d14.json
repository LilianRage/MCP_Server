{"ast":null,"code":"import axios from 'axios';\n\n// URL de votre API locale (à ajuster selon votre configuration)\nconst LOCAL_API_URL = 'http://localhost:8001';\n\n// URL de votre endpoint RunPod (à remplacer par votre URL réelle)\nconst RUNPOD_API_URL = 'https://api.runpod.ai/v2/b0h5t63skluh6d/run';\n\n// Clé API RunPod (à stocker en sécurité dans un .env en production)\nconst RUNPOD_API_KEY = 'rpa_DK0EL36X37FTK55LQENKHECC8PYYW8URSUNDTSJM19h72x';\n\n// API pour l'agent local\nconst localApi = axios.create({\n  baseURL: LOCAL_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// API pour RunPod (si nécessaire pour des appels directs)\nconst runpodApi = axios.create({\n  baseURL: RUNPOD_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${RUNPOD_API_KEY}`\n  }\n});\n\n/**\n * Vérifie le statut du serveur local et la disponibilité d'Excel\n * @returns {Promise} - Statut du serveur et Excel\n */\nexport const checkMcpStatus = async () => {\n  try {\n    const response = await localApi.get('/mcp/status');\n    return response.data;\n  } catch (error) {\n    console.error('Status check error:', error);\n    return {\n      success: false,\n      error: error.message || 'Erreur de connexion au serveur local'\n    };\n  }\n};\n\n/**\n * Récupère la liste des classeurs Excel ouverts\n * @returns {Promise} - Liste des classeurs\n */\nexport const getOpenWorkbooks = async () => {\n  try {\n    const response = await localApi.get('/mcp/workbooks');\n    return response.data;\n  } catch (error) {\n    console.error('Workbooks fetch error:', error);\n    throw error;\n  }\n};\n\n/**\n * Lit les données d'une feuille dans un classeur ouvert\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @returns {Promise} - Données de la feuille\n */\nexport const readSheetData = async (workbook, sheet) => {\n  try {\n    const response = await localApi.post('/mcp/read_sheet', {\n      workbook: workbook,\n      sheet: sheet\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Sheet read error:', error);\n    throw error;\n  }\n};\n\n/**\n * Analyse une feuille Excel avec embedding\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @param {string} query - Requête utilisateur\n * @param {number} topK - Nombre de résultats à retourner\n * @returns {Promise} - Résultat de l'analyse\n */\nexport const analyzeSheetWithEmbedding = async (workbook, sheet, query, topK = 5) => {\n  try {\n    const response = await localApi.post('/mcp/analyze', {\n      workbook: workbook,\n      sheet: sheet,\n      query: query,\n      top_k: topK\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Embedding analysis error:', error);\n    throw error;\n  }\n};\nexport default {\n  checkMcpStatus,\n  getOpenWorkbooks,\n  readSheetData,\n  analyzeSheetWithEmbedding\n};","map":{"version":3,"names":["axios","LOCAL_API_URL","RUNPOD_API_URL","RUNPOD_API_KEY","localApi","create","baseURL","headers","runpodApi","checkMcpStatus","response","get","data","error","console","success","message","getOpenWorkbooks","readSheetData","workbook","sheet","post","analyzeSheetWithEmbedding","query","topK","top_k"],"sources":["/Users/lilianrage/Library/Mobile Documents/com~apple~CloudDocs/ALYON/Produits/MCP_Server/excel-mcp-client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// URL de votre API locale (à ajuster selon votre configuration)\nconst LOCAL_API_URL = 'http://localhost:8001';\n\n// URL de votre endpoint RunPod (à remplacer par votre URL réelle)\nconst RUNPOD_API_URL = 'https://api.runpod.ai/v2/b0h5t63skluh6d/run';\n\n// Clé API RunPod (à stocker en sécurité dans un .env en production)\nconst RUNPOD_API_KEY = 'rpa_DK0EL36X37FTK55LQENKHECC8PYYW8URSUNDTSJM19h72x';\n\n// API pour l'agent local\nconst localApi = axios.create({\n  baseURL: LOCAL_API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// API pour RunPod (si nécessaire pour des appels directs)\nconst runpodApi = axios.create({\n  baseURL: RUNPOD_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${RUNPOD_API_KEY}`\n  }\n});\n\n/**\n * Vérifie le statut du serveur local et la disponibilité d'Excel\n * @returns {Promise} - Statut du serveur et Excel\n */\nexport const checkMcpStatus = async () => {\n  try {\n    const response = await localApi.get('/mcp/status');\n    return response.data;\n  } catch (error) {\n    console.error('Status check error:', error);\n    return { \n      success: false, \n      error: error.message || 'Erreur de connexion au serveur local'\n    };\n  }\n};\n\n/**\n * Récupère la liste des classeurs Excel ouverts\n * @returns {Promise} - Liste des classeurs\n */\nexport const getOpenWorkbooks = async () => {\n  try {\n    const response = await localApi.get('/mcp/workbooks');\n    return response.data;\n  } catch (error) {\n    console.error('Workbooks fetch error:', error);\n    throw error;\n  }\n};\n\n/**\n * Lit les données d'une feuille dans un classeur ouvert\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @returns {Promise} - Données de la feuille\n */\nexport const readSheetData = async (workbook, sheet) => {\n  try {\n    const response = await localApi.post('/mcp/read_sheet', {\n      workbook: workbook,\n      sheet: sheet\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Sheet read error:', error);\n    throw error;\n  }\n};\n\n/**\n * Analyse une feuille Excel avec embedding\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @param {string} query - Requête utilisateur\n * @param {number} topK - Nombre de résultats à retourner\n * @returns {Promise} - Résultat de l'analyse\n */\nexport const analyzeSheetWithEmbedding = async (workbook, sheet, query, topK = 5) => {\n  try {\n    const response = await localApi.post('/mcp/analyze', {\n      workbook: workbook,\n      sheet: sheet,\n      query: query,\n      top_k: topK\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Embedding analysis error:', error);\n    throw error;\n  }\n};\n\nexport default {\n  checkMcpStatus,\n  getOpenWorkbooks,\n  readSheetData,\n  analyzeSheetWithEmbedding\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAG,uBAAuB;;AAE7C;AACA,MAAMC,cAAc,GAAG,6CAA6C;;AAEpE;AACA,MAAMC,cAAc,GAAG,oDAAoD;;AAE3E;AACA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAAC;EAC5BC,OAAO,EAAEL,aAAa;EACtBM,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA,MAAMC,SAAS,GAAGR,KAAK,CAACK,MAAM,CAAC;EAC7BC,OAAO,EAAEJ,cAAc;EACvBK,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,eAAe,EAAE,UAAUJ,cAAc;EAC3C;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMM,cAAc,GAAG,MAAAA,CAAA,KAAY;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,QAAQ,CAACO,GAAG,CAAC,aAAa,CAAC;IAClD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO;MACLE,OAAO,EAAE,KAAK;MACdF,KAAK,EAAEA,KAAK,CAACG,OAAO,IAAI;IAC1B,CAAC;EACH;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAMN,QAAQ,CAACO,GAAG,CAAC,gBAAgB,CAAC;IACrD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,aAAa,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,KAAK;EACtD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAMN,QAAQ,CAACiB,IAAI,CAAC,iBAAiB,EAAE;MACtDF,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA;IACT,CAAC,CAAC;IACF,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,yBAAyB,GAAG,MAAAA,CAAOH,QAAQ,EAAEC,KAAK,EAAEG,KAAK,EAAEC,IAAI,GAAG,CAAC,KAAK;EACnF,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAMN,QAAQ,CAACiB,IAAI,CAAC,cAAc,EAAE;MACnDF,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA,KAAK;MACZG,KAAK,EAAEA,KAAK;MACZE,KAAK,EAAED;IACT,CAAC,CAAC;IACF,OAAOd,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,eAAe;EACbJ,cAAc;EACdQ,gBAAgB;EAChBC,aAAa;EACbI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}