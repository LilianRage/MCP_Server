{"ast":null,"code":"var _jsxFileName = \"/Users/lilianrage/Library/Mobile Documents/com~apple~CloudDocs/ALYON/Produits/MCP_Server/excel-mcp-client/src/components/ExcelConnector/ExcelConnector.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { checkMcpStatus, getOpenWorkbooks, readSheetData, analyzeSheetWithEmbedding } from '../../services/api';\nimport './ExcelConnector.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction ExcelConnector() {\n  _s();\n  const [status, setStatus] = useState({\n    connected: false,\n    error: null,\n    excelRunning: false\n  });\n  const [workbooks, setWorkbooks] = useState([]);\n  const [selectedWorkbook, setSelectedWorkbook] = useState('');\n  const [selectedSheet, setSelectedSheet] = useState('');\n  const [sheets, setSheets] = useState([]);\n  const [excelData, setExcelData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState(null);\n  const [topK, setTopK] = useState(5);\n\n  // Vérifier la connexion et Excel au chargement\n  useEffect(() => {\n    checkServerStatus();\n  }, []);\n\n  // Vérifier le statut du serveur MCP\n  const checkServerStatus = async () => {\n    setLoading(true);\n    setStatus({\n      ...status,\n      error: null\n    });\n    try {\n      // Vérifier si le serveur est accessible et si Excel est en cours d'exécution\n      const statusResponse = await checkMcpStatus();\n      if (statusResponse.success) {\n        setStatus({\n          connected: true,\n          error: null,\n          excelRunning: statusResponse.excel_running || false\n        });\n\n        // Si Excel est en cours d'exécution, récupérer les classeurs ouverts\n        if (statusResponse.excel_running) {\n          fetchOpenWorkbooks();\n        }\n      } else {\n        setStatus({\n          connected: true,\n          error: statusResponse.error || \"Impossible de se connecter à Excel\",\n          excelRunning: false\n        });\n      }\n    } catch (error) {\n      console.error('Erreur de connexion:', error);\n      setStatus({\n        connected: false,\n        error: \"Impossible de se connecter au serveur MCP\",\n        excelRunning: false\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Récupérer les classeurs Excel ouverts\n  const fetchOpenWorkbooks = async () => {\n    setLoading(true);\n    try {\n      const response = await getOpenWorkbooks();\n      if (response && response.success && response.workbooks) {\n        setWorkbooks(response.workbooks);\n        if (response.workbooks.length > 0) {\n          // Présélectionner le premier classeur\n          const firstWorkbook = response.workbooks[0];\n          setSelectedWorkbook(firstWorkbook.name);\n\n          // Charger les feuilles du classeur\n          setSheets(firstWorkbook.sheets || []);\n\n          // Présélectionner la première feuille si disponible\n          if (firstWorkbook.sheets && firstWorkbook.sheets.length > 0) {\n            setSelectedSheet(firstWorkbook.sheets[0]);\n          }\n        }\n      } else {\n        throw new Error((response === null || response === void 0 ? void 0 : response.error) || \"Erreur lors de la récupération des classeurs\");\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des classeurs:', error);\n      setStatus({\n        ...status,\n        error: `Erreur lors de la récupération des classeurs: ${error.message}`\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Charger les données d'une feuille Excel\n  const loadSheetData = async () => {\n    if (!selectedWorkbook || !selectedSheet) return;\n    setLoading(true);\n    setExcelData(null);\n    setResults(null);\n    try {\n      const response = await readSheetData(selectedWorkbook, selectedSheet);\n      if (response && response.success && response.result) {\n        setExcelData({\n          headers: response.result.headers || [],\n          rows: response.result.rows || [],\n          rowCount: response.result.row_count || 0,\n          columnCount: response.result.column_count || 0,\n          sheetName: selectedSheet\n        });\n      } else {\n        throw new Error((response === null || response === void 0 ? void 0 : response.error) || \"Erreur lors du chargement des données\");\n      }\n    } catch (error) {\n      console.error('Erreur lors du chargement des données:', error);\n      setStatus({\n        ...status,\n        error: `Erreur lors du chargement des données: ${error.message}`\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Analyser une feuille avec embedding\n  const handleAnalyze = async () => {\n    if (!selectedWorkbook || !selectedSheet || !query.trim()) return;\n    setLoading(true);\n    setResults(null);\n    try {\n      const response = await analyzeSheetWithEmbedding(selectedWorkbook, selectedSheet, query, topK);\n      if (response && response.success && response.result) {\n        setResults(response.result);\n      } else {\n        throw new Error((response === null || response === void 0 ? void 0 : response.error) || \"Erreur lors de l'analyse\");\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'analyse:', error);\n      setStatus({\n        ...status,\n        error: `Erreur lors de l'analyse: ${error.message}`\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Changer de classeur sélectionné\n  const handleWorkbookChange = e => {\n    const workbookName = e.target.value;\n    setSelectedWorkbook(workbookName);\n\n    // Mettre à jour les feuilles disponibles\n    const workbook = workbooks.find(wb => wb.name === workbookName);\n    if (workbook) {\n      setSheets(workbook.sheets || []);\n      // Présélectionner la première feuille\n      setSelectedSheet(workbook.sheets && workbook.sheets.length > 0 ? workbook.sheets[0] : '');\n    } else {\n      setSheets([]);\n      setSelectedSheet('');\n    }\n\n    // Réinitialiser les données et résultats\n    setExcelData(null);\n    setResults(null);\n  };\n\n  // Changer de feuille sélectionnée\n  const handleSheetChange = e => {\n    setSelectedSheet(e.target.value);\n    // Réinitialiser les données et résultats lors du changement de feuille\n    setExcelData(null);\n    setResults(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"excel-connector\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Excel MCP Analyzer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"refresh-button\",\n        onClick: checkServerStatus,\n        disabled: loading,\n        children: \"Rafra\\xEEchir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), status.error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: status.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 24\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-indicator\",\n      children: \"Chargement en cours...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 19\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workbook-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"S\\xE9lection du classeur\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), workbooks.length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"select-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Classeur Excel:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedWorkbook,\n                onChange: handleWorkbookChange,\n                disabled: loading,\n                children: workbooks.map(wb => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: wb.name,\n                  children: wb.name\n                }, wb.name, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 227,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 221,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 17\n            }, this), selectedWorkbook && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"select-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Feuille:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: selectedSheet,\n                onChange: handleSheetChange,\n                disabled: loading,\n                children: sheets.map(sheet => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: sheet,\n                  children: sheet\n                }, sheet, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 241,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: loadSheetData,\n              disabled: !selectedWorkbook || !selectedSheet || loading,\n              className: \"load-button\",\n              children: \"Charger les donn\\xE9es\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-workbooks-message\",\n            children: status.connected ? status.excelRunning ? \"Aucun classeur Excel n'est ouvert. Veuillez ouvrir un fichier Excel.\" : \"Excel n'est pas en cours d'exécution. Veuillez ouvrir Excel.\" : \"Connexion au serveur MCP non établie.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"options-panel\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Options d'analyse\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option-group\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Nombre de r\\xE9sultats (top-k):\", /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                min: \"1\",\n                max: \"20\",\n                value: topK,\n                onChange: e => setTopK(Math.max(1, parseInt(e.target.value) || 1)),\n                disabled: loading\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content-area\",\n        children: excelData ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-explorer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Donn\\xE9es charg\\xE9es\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Classeur:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 292,\n                columnNumber: 19\n              }, this), \" \", selectedWorkbook, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Feuille:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 293,\n                columnNumber: 19\n              }, this), \" \", excelData.sheetName, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Lignes:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 19\n              }, this), \" \", excelData.rowCount, \" |\", /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: \"Colonnes:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 19\n              }, this), \" \", excelData.columnCount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"data-preview\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Aper\\xE7u des donn\\xE9es\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"table-container\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"index-column\",\n                      children: \"#\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 306,\n                      columnNumber: 25\n                    }, this), excelData.headers.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: header\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 308,\n                      columnNumber: 27\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 305,\n                    columnNumber: 23\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 304,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: excelData.rows.slice(0, 5).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                      className: \"row-index\",\n                      children: rowIndex + 1\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 315,\n                      columnNumber: 27\n                    }, this), row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                      children: cell !== null ? cell : ''\n                    }, cellIndex, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 317,\n                      columnNumber: 29\n                    }, this))]\n                  }, rowIndex, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 314,\n                    columnNumber: 25\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 312,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 303,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 17\n            }, this), excelData.rowCount > 5 && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"more-rows-note\",\n              children: [\"+ \", excelData.rowCount - 5, \" lignes suppl\\xE9mentaires\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"query-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Poser une question sur ces donn\\xE9es\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"query-input\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: query,\n                onChange: e => setQuery(e.target.value),\n                placeholder: \"Ex: Quelles lignes contiennent des informations sur...\",\n                disabled: loading,\n                onKeyPress: e => e.key === 'Enter' && handleAnalyze()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleAnalyze,\n                disabled: !query.trim() || loading,\n                className: \"analyze-button\",\n                children: \"Analyser\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 344,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this), results && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"results-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"R\\xE9sultats de l'analyse\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 356,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"table-container\",\n              children: /*#__PURE__*/_jsxDEV(\"table\", {\n                children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n                  children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                    children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"score-column\",\n                      children: \"Score\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 362,\n                      columnNumber: 27\n                    }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                      className: \"index-column\",\n                      children: \"Ligne\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 363,\n                      columnNumber: 27\n                    }, this), results.headers.map((header, index) => /*#__PURE__*/_jsxDEV(\"th\", {\n                      children: header\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 365,\n                      columnNumber: 29\n                    }, this))]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 361,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 360,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n                  children: results.rows.map((row, rowIndex) => {\n                    const originalIndex = results.original_indices[rowIndex];\n                    const score = results.similarity_scores[originalIndex];\n                    return /*#__PURE__*/_jsxDEV(\"tr\", {\n                      className: rowIndex === 0 ? \"top-result\" : \"\",\n                      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"similarity-score\",\n                        children: [(score * 100).toFixed(2), \"%\"]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 376,\n                        columnNumber: 31\n                      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                        className: \"row-index\",\n                        children: originalIndex + 1\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 379,\n                        columnNumber: 31\n                      }, this), row.map((cell, cellIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n                        children: cell !== null ? cell : ''\n                      }, cellIndex, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 381,\n                        columnNumber: 33\n                      }, this))]\n                    }, rowIndex, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 375,\n                      columnNumber: 29\n                    }, this);\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 369,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 358,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-data-message\",\n          children: workbooks.length > 0 ? \"Sélectionnez un classeur et une feuille, puis cliquez sur 'Charger les données'\" : status.excelRunning ? \"Aucun classeur Excel ouvert détecté\" : \"Excel n'est pas en cours d'exécution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n}\n_s(ExcelConnector, \"XrOkIftWLYzhXLrM/CZ6HDNYw6E=\");\n_c = ExcelConnector;\nexport default ExcelConnector;\nvar _c;\n$RefreshReg$(_c, \"ExcelConnector\");","map":{"version":3,"names":["React","useState","useEffect","checkMcpStatus","getOpenWorkbooks","readSheetData","analyzeSheetWithEmbedding","jsxDEV","_jsxDEV","Fragment","_Fragment","ExcelConnector","_s","status","setStatus","connected","error","excelRunning","workbooks","setWorkbooks","selectedWorkbook","setSelectedWorkbook","selectedSheet","setSelectedSheet","sheets","setSheets","excelData","setExcelData","loading","setLoading","query","setQuery","results","setResults","topK","setTopK","checkServerStatus","statusResponse","success","excel_running","fetchOpenWorkbooks","console","response","length","firstWorkbook","name","Error","message","loadSheetData","result","headers","rows","rowCount","row_count","columnCount","column_count","sheetName","handleAnalyze","trim","handleWorkbookChange","e","workbookName","target","value","workbook","find","wb","handleSheetChange","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","onChange","map","sheet","type","min","max","Math","parseInt","header","index","slice","row","rowIndex","cell","cellIndex","placeholder","onKeyPress","key","originalIndex","original_indices","score","similarity_scores","toFixed","_c","$RefreshReg$"],"sources":["/Users/lilianrage/Library/Mobile Documents/com~apple~CloudDocs/ALYON/Produits/MCP_Server/excel-mcp-client/src/components/ExcelConnector/ExcelConnector.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { checkMcpStatus, getOpenWorkbooks, readSheetData, analyzeSheetWithEmbedding } from '../../services/api';\nimport './ExcelConnector.css';\n\nfunction ExcelConnector() {\n  const [status, setStatus] = useState({\n    connected: false,\n    error: null,\n    excelRunning: false\n  });\n  const [workbooks, setWorkbooks] = useState([]);\n  const [selectedWorkbook, setSelectedWorkbook] = useState('');\n  const [selectedSheet, setSelectedSheet] = useState('');\n  const [sheets, setSheets] = useState([]);\n  const [excelData, setExcelData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState(null);\n  const [topK, setTopK] = useState(5);\n\n  // Vérifier la connexion et Excel au chargement\n  useEffect(() => {\n    checkServerStatus();\n  }, []);\n\n  // Vérifier le statut du serveur MCP\n  const checkServerStatus = async () => {\n    setLoading(true);\n    setStatus({...status, error: null});\n    \n    try {\n      // Vérifier si le serveur est accessible et si Excel est en cours d'exécution\n      const statusResponse = await checkMcpStatus();\n      \n      if (statusResponse.success) {\n        setStatus({\n          connected: true,\n          error: null,\n          excelRunning: statusResponse.excel_running || false\n        });\n        \n        // Si Excel est en cours d'exécution, récupérer les classeurs ouverts\n        if (statusResponse.excel_running) {\n          fetchOpenWorkbooks();\n        }\n      } else {\n        setStatus({\n          connected: true,\n          error: statusResponse.error || \"Impossible de se connecter à Excel\",\n          excelRunning: false\n        });\n      }\n    } catch (error) {\n      console.error('Erreur de connexion:', error);\n      setStatus({\n        connected: false,\n        error: \"Impossible de se connecter au serveur MCP\",\n        excelRunning: false\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Récupérer les classeurs Excel ouverts\n  const fetchOpenWorkbooks = async () => {\n    setLoading(true);\n    \n    try {\n      const response = await getOpenWorkbooks();\n      \n      if (response && response.success && response.workbooks) {\n        setWorkbooks(response.workbooks);\n        \n        if (response.workbooks.length > 0) {\n          // Présélectionner le premier classeur\n          const firstWorkbook = response.workbooks[0];\n          setSelectedWorkbook(firstWorkbook.name);\n          \n          // Charger les feuilles du classeur\n          setSheets(firstWorkbook.sheets || []);\n          \n          // Présélectionner la première feuille si disponible\n          if (firstWorkbook.sheets && firstWorkbook.sheets.length > 0) {\n            setSelectedSheet(firstWorkbook.sheets[0]);\n          }\n        }\n      } else {\n        throw new Error(response?.error || \"Erreur lors de la récupération des classeurs\");\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des classeurs:', error);\n      setStatus({\n        ...status,\n        error: `Erreur lors de la récupération des classeurs: ${error.message}`\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Charger les données d'une feuille Excel\n  const loadSheetData = async () => {\n    if (!selectedWorkbook || !selectedSheet) return;\n    \n    setLoading(true);\n    setExcelData(null);\n    setResults(null);\n    \n    try {\n      const response = await readSheetData(selectedWorkbook, selectedSheet);\n      \n      if (response && response.success && response.result) {\n        setExcelData({\n          headers: response.result.headers || [],\n          rows: response.result.rows || [],\n          rowCount: response.result.row_count || 0,\n          columnCount: response.result.column_count || 0,\n          sheetName: selectedSheet\n        });\n      } else {\n        throw new Error(response?.error || \"Erreur lors du chargement des données\");\n      }\n    } catch (error) {\n      console.error('Erreur lors du chargement des données:', error);\n      setStatus({\n        ...status,\n        error: `Erreur lors du chargement des données: ${error.message}`\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Analyser une feuille avec embedding\n  const handleAnalyze = async () => {\n    if (!selectedWorkbook || !selectedSheet || !query.trim()) return;\n    \n    setLoading(true);\n    setResults(null);\n    \n    try {\n      const response = await analyzeSheetWithEmbedding(\n        selectedWorkbook, \n        selectedSheet, \n        query, \n        topK\n      );\n      \n      if (response && response.success && response.result) {\n        setResults(response.result);\n      } else {\n        throw new Error(response?.error || \"Erreur lors de l'analyse\");\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'analyse:', error);\n      setStatus({\n        ...status,\n        error: `Erreur lors de l'analyse: ${error.message}`\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Changer de classeur sélectionné\n  const handleWorkbookChange = (e) => {\n    const workbookName = e.target.value;\n    setSelectedWorkbook(workbookName);\n    \n    // Mettre à jour les feuilles disponibles\n    const workbook = workbooks.find(wb => wb.name === workbookName);\n    if (workbook) {\n      setSheets(workbook.sheets || []);\n      // Présélectionner la première feuille\n      setSelectedSheet(workbook.sheets && workbook.sheets.length > 0 ? workbook.sheets[0] : '');\n    } else {\n      setSheets([]);\n      setSelectedSheet('');\n    }\n    \n    // Réinitialiser les données et résultats\n    setExcelData(null);\n    setResults(null);\n  };\n\n  // Changer de feuille sélectionnée\n  const handleSheetChange = (e) => {\n    setSelectedSheet(e.target.value);\n    // Réinitialiser les données et résultats lors du changement de feuille\n    setExcelData(null);\n    setResults(null);\n  };\n\n  return (\n    <div className=\"excel-connector\">\n      <header>\n        <h1>Excel MCP Analyzer</h1>\n        <button \n          className=\"refresh-button\" \n          onClick={checkServerStatus}\n          disabled={loading}\n        >\n          Rafraîchir\n        </button>\n      </header>\n      \n      {status.error && <div className=\"error-message\">{status.error}</div>}\n      \n      {loading && <div className=\"loading-indicator\">Chargement en cours...</div>}\n      \n      <div className=\"main-content\">\n        <div className=\"sidebar\">\n          <div className=\"workbook-selector\">\n            <h2>Sélection du classeur</h2>\n            \n            {workbooks.length > 0 ? (\n              <>\n                <div className=\"select-group\">\n                  <label>Classeur Excel:</label>\n                  <select \n                    value={selectedWorkbook} \n                    onChange={handleWorkbookChange}\n                    disabled={loading}\n                  >\n                    {workbooks.map(wb => (\n                      <option key={wb.name} value={wb.name}>{wb.name}</option>\n                    ))}\n                  </select>\n                </div>\n                \n                {selectedWorkbook && (\n                  <div className=\"select-group\">\n                    <label>Feuille:</label>\n                    <select \n                      value={selectedSheet} \n                      onChange={handleSheetChange}\n                      disabled={loading}\n                    >\n                      {sheets.map(sheet => (\n                        <option key={sheet} value={sheet}>{sheet}</option>\n                      ))}\n                    </select>\n                  </div>\n                )}\n                \n                <button \n                  onClick={loadSheetData} \n                  disabled={!selectedWorkbook || !selectedSheet || loading}\n                  className=\"load-button\"\n                >\n                  Charger les données\n                </button>\n              </>\n            ) : (\n              <div className=\"no-workbooks-message\">\n                {status.connected ? (\n                  status.excelRunning ? \n                    \"Aucun classeur Excel n'est ouvert. Veuillez ouvrir un fichier Excel.\" : \n                    \"Excel n'est pas en cours d'exécution. Veuillez ouvrir Excel.\"\n                ) : (\n                  \"Connexion au serveur MCP non établie.\"\n                )}\n              </div>\n            )}\n          </div>\n          \n          <div className=\"options-panel\">\n            <h2>Options d'analyse</h2>\n            <div className=\"option-group\">\n              <label>\n                Nombre de résultats (top-k):\n                <input \n                  type=\"number\" \n                  min=\"1\" \n                  max=\"20\" \n                  value={topK} \n                  onChange={(e) => setTopK(Math.max(1, parseInt(e.target.value) || 1))}\n                  disabled={loading}\n                />\n              </label>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"content-area\">\n          {excelData ? (\n            <div className=\"data-explorer\">\n              <div className=\"data-info\">\n                <h2>Données chargées</h2>\n                <p>\n                  <strong>Classeur:</strong> {selectedWorkbook} | \n                  <strong>Feuille:</strong> {excelData.sheetName} | \n                  <strong>Lignes:</strong> {excelData.rowCount} | \n                  <strong>Colonnes:</strong> {excelData.columnCount}\n                </p>\n              </div>\n              \n              <div className=\"data-preview\">\n                <h3>Aperçu des données</h3>\n                \n                <div className=\"table-container\">\n                  <table>\n                    <thead>\n                      <tr>\n                        <th className=\"index-column\">#</th>\n                        {excelData.headers.map((header, index) => (\n                          <th key={index}>{header}</th>\n                        ))}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {excelData.rows.slice(0, 5).map((row, rowIndex) => (\n                        <tr key={rowIndex}>\n                          <td className=\"row-index\">{rowIndex + 1}</td>\n                          {row.map((cell, cellIndex) => (\n                            <td key={cellIndex}>{cell !== null ? cell : ''}</td>\n                          ))}\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n                \n                {excelData.rowCount > 5 && (\n                  <p className=\"more-rows-note\">\n                    + {excelData.rowCount - 5} lignes supplémentaires\n                  </p>\n                )}\n              </div>\n              \n              <div className=\"query-section\">\n                <h3>Poser une question sur ces données</h3>\n                \n                <div className=\"query-input\">\n                  <input\n                    type=\"text\"\n                    value={query}\n                    onChange={(e) => setQuery(e.target.value)}\n                    placeholder=\"Ex: Quelles lignes contiennent des informations sur...\"\n                    disabled={loading}\n                    onKeyPress={(e) => e.key === 'Enter' && handleAnalyze()}\n                  />\n                  <button \n                    onClick={handleAnalyze} \n                    disabled={!query.trim() || loading}\n                    className=\"analyze-button\"\n                  >\n                    Analyser\n                  </button>\n                </div>\n              </div>\n              \n              {results && (\n                <div className=\"results-section\">\n                  <h3>Résultats de l'analyse</h3>\n                  \n                  <div className=\"table-container\">\n                    <table>\n                      <thead>\n                        <tr>\n                          <th className=\"score-column\">Score</th>\n                          <th className=\"index-column\">Ligne</th>\n                          {results.headers.map((header, index) => (\n                            <th key={index}>{header}</th>\n                          ))}\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {results.rows.map((row, rowIndex) => {\n                          const originalIndex = results.original_indices[rowIndex];\n                          const score = results.similarity_scores[originalIndex];\n                          \n                          return (\n                            <tr key={rowIndex} className={rowIndex === 0 ? \"top-result\" : \"\"}>\n                              <td className=\"similarity-score\">\n                                {(score * 100).toFixed(2)}%\n                              </td>\n                              <td className=\"row-index\">{originalIndex + 1}</td>\n                              {row.map((cell, cellIndex) => (\n                                <td key={cellIndex}>{cell !== null ? cell : ''}</td>\n                              ))}\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"no-data-message\">\n              {workbooks.length > 0 ? (\n                \"Sélectionnez un classeur et une feuille, puis cliquez sur 'Charger les données'\"\n              ) : (\n                status.excelRunning ? \n                  \"Aucun classeur Excel ouvert détecté\" : \n                  \"Excel n'est pas en cours d'exécution\"\n              )}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ExcelConnector;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}