{"ast":null,"code":"import axios from 'axios';\n\n// URL de votre endpoint RunPod (à remplacer par votre URL réelle)\nconst API_URL = 'https://api.runpod.ai/v2/b0h5t63skluh6d/run';\n// Pour les tests locaux, décommentez la ligne suivante:\n// const API_URL = 'http://localhost:8000';\n\n// Clé API RunPod (à stocker en sécurité dans un .env en production)\nconst API_KEY = 'votre-clé-api-runpod';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${API_KEY}`\n  }\n});\n\n/**\n * Appelle une commande MCP Excel\n * @param {string} command - Nom de la commande\n * @param {object} params - Paramètres de la commande\n * @param {Array} files - Fichiers à envoyer (optionnel)\n * @returns {Promise} - Résultat de la commande\n */\nexport const callExcelMCP = async (command, params, files = []) => {\n  // Convertir les fichiers en base64 si nécessaire\n  const fileData = await Promise.all(files.map(async file => {\n    if (file instanceof File) {\n      const content = await fileToBase64(file);\n      return {\n        name: file.name,\n        content: content\n      };\n    }\n    return file; // Déjà formaté\n  }));\n  try {\n    const response = await api.post('', {\n      input: {\n        command: command,\n        params: params,\n        files: fileData\n      }\n    });\n\n    // RunPod renvoie généralement les données dans un format spécifique\n    if (response.data && response.data.output) {\n      return response.data.output;\n    }\n    return response.data;\n  } catch (error) {\n    console.error('API error:', error);\n    throw error;\n  }\n};\n\n/**\n * Analyse un fichier Excel avec embedding\n * @param {string} query - Requête utilisateur\n * @param {File} excelFile - Fichier Excel\n * @param {number} topK - Nombre de résultats à retourner\n * @returns {Promise} - Résultat de l'analyse\n */\nexport const analyzeExcelWithEmbedding = async (query, excelFile, topK = 5) => {\n  try {\n    const content = await fileToBase64(excelFile);\n    const response = await api.post('/excel/query', {\n      query: query,\n      excel_file: {\n        name: excelFile.name,\n        content: content\n      },\n      top_k: topK\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Embedding API error:', error);\n    throw error;\n  }\n};\n\n/**\n * Convertit un fichier en base64\n * @param {File} file - Fichier à convertir\n * @returns {Promise<string>} - Chaîne base64\n */\nconst fileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      // Enlever le préfixe \"data:application/...;base64,\"\n      const base64String = reader.result.split(',')[1];\n      resolve(base64String);\n    };\n    reader.onerror = error => reject(error);\n  });\n};\nexport default {\n  callExcelMCP,\n  analyzeExcelWithEmbedding\n};","map":{"version":3,"names":["axios","API_URL","API_KEY","api","create","baseURL","headers","callExcelMCP","command","params","files","fileData","Promise","all","map","file","File","content","fileToBase64","name","response","post","input","data","output","error","console","analyzeExcelWithEmbedding","query","excelFile","topK","excel_file","top_k","resolve","reject","reader","FileReader","readAsDataURL","onload","base64String","result","split","onerror"],"sources":["/Users/lilianrage/Library/Mobile Documents/com~apple~CloudDocs/ALYON/Produits/MCP_Server/excel-mcp-client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// URL de votre endpoint RunPod (à remplacer par votre URL réelle)\nconst API_URL = 'https://api.runpod.ai/v2/b0h5t63skluh6d/run';\n// Pour les tests locaux, décommentez la ligne suivante:\n// const API_URL = 'http://localhost:8000';\n\n// Clé API RunPod (à stocker en sécurité dans un .env en production)\nconst API_KEY = 'votre-clé-api-runpod';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${API_KEY}`\n  }\n});\n\n/**\n * Appelle une commande MCP Excel\n * @param {string} command - Nom de la commande\n * @param {object} params - Paramètres de la commande\n * @param {Array} files - Fichiers à envoyer (optionnel)\n * @returns {Promise} - Résultat de la commande\n */\nexport const callExcelMCP = async (command, params, files = []) => {\n  // Convertir les fichiers en base64 si nécessaire\n  const fileData = await Promise.all(\n    files.map(async (file) => {\n      if (file instanceof File) {\n        const content = await fileToBase64(file);\n        return {\n          name: file.name,\n          content: content\n        };\n      }\n      return file; // Déjà formaté\n    })\n  );\n\n  try {\n    const response = await api.post('', {\n      input: {\n        command: command,\n        params: params,\n        files: fileData\n      }\n    });\n\n    // RunPod renvoie généralement les données dans un format spécifique\n    if (response.data && response.data.output) {\n      return response.data.output;\n    }\n    \n    return response.data;\n  } catch (error) {\n    console.error('API error:', error);\n    throw error;\n  }\n};\n\n/**\n * Analyse un fichier Excel avec embedding\n * @param {string} query - Requête utilisateur\n * @param {File} excelFile - Fichier Excel\n * @param {number} topK - Nombre de résultats à retourner\n * @returns {Promise} - Résultat de l'analyse\n */\nexport const analyzeExcelWithEmbedding = async (query, excelFile, topK = 5) => {\n  try {\n    const content = await fileToBase64(excelFile);\n    \n    const response = await api.post('/excel/query', {\n      query: query,\n      excel_file: {\n        name: excelFile.name,\n        content: content\n      },\n      top_k: topK\n    });\n    \n    return response.data;\n  } catch (error) {\n    console.error('Embedding API error:', error);\n    throw error;\n  }\n};\n\n/**\n * Convertit un fichier en base64\n * @param {File} file - Fichier à convertir\n * @returns {Promise<string>} - Chaîne base64\n */\nconst fileToBase64 = (file) => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => {\n      // Enlever le préfixe \"data:application/...;base64,\"\n      const base64String = reader.result.split(',')[1];\n      resolve(base64String);\n    };\n    reader.onerror = (error) => reject(error);\n  });\n};\n\nexport default {\n  callExcelMCP,\n  analyzeExcelWithEmbedding\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,6CAA6C;AAC7D;AACA;;AAEA;AACA,MAAMC,OAAO,GAAG,sBAAsB;AAEtC,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACvBC,OAAO,EAAEJ,OAAO;EAChBK,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,eAAe,EAAE,UAAUJ,OAAO;EACpC;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,YAAY,GAAG,MAAAA,CAAOC,OAAO,EAAEC,MAAM,EAAEC,KAAK,GAAG,EAAE,KAAK;EACjE;EACA,MAAMC,QAAQ,GAAG,MAAMC,OAAO,CAACC,GAAG,CAChCH,KAAK,CAACI,GAAG,CAAC,MAAOC,IAAI,IAAK;IACxB,IAAIA,IAAI,YAAYC,IAAI,EAAE;MACxB,MAAMC,OAAO,GAAG,MAAMC,YAAY,CAACH,IAAI,CAAC;MACxC,OAAO;QACLI,IAAI,EAAEJ,IAAI,CAACI,IAAI;QACfF,OAAO,EAAEA;MACX,CAAC;IACH;IACA,OAAOF,IAAI,CAAC,CAAC;EACf,CAAC,CACH,CAAC;EAED,IAAI;IACF,MAAMK,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,IAAI,CAAC,EAAE,EAAE;MAClCC,KAAK,EAAE;QACLd,OAAO,EAAEA,OAAO;QAChBC,MAAM,EAAEA,MAAM;QACdC,KAAK,EAAEC;MACT;IACF,CAAC,CAAC;;IAEF;IACA,IAAIS,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACC,MAAM,EAAE;MACzC,OAAOJ,QAAQ,CAACG,IAAI,CAACC,MAAM;IAC7B;IAEA,OAAOJ,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,yBAAyB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,SAAS,EAAEC,IAAI,GAAG,CAAC,KAAK;EAC7E,IAAI;IACF,MAAMb,OAAO,GAAG,MAAMC,YAAY,CAACW,SAAS,CAAC;IAE7C,MAAMT,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,IAAI,CAAC,cAAc,EAAE;MAC9CO,KAAK,EAAEA,KAAK;MACZG,UAAU,EAAE;QACVZ,IAAI,EAAEU,SAAS,CAACV,IAAI;QACpBF,OAAO,EAAEA;MACX,CAAC;MACDe,KAAK,EAAEF;IACT,CAAC,CAAC;IAEF,OAAOV,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMP,YAAY,GAAIH,IAAI,IAAK;EAC7B,OAAO,IAAIH,OAAO,CAAC,CAACqB,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAC/BD,MAAM,CAACE,aAAa,CAACtB,IAAI,CAAC;IAC1BoB,MAAM,CAACG,MAAM,GAAG,MAAM;MACpB;MACA,MAAMC,YAAY,GAAGJ,MAAM,CAACK,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAChDR,OAAO,CAACM,YAAY,CAAC;IACvB,CAAC;IACDJ,MAAM,CAACO,OAAO,GAAIjB,KAAK,IAAKS,MAAM,CAACT,KAAK,CAAC;EAC3C,CAAC,CAAC;AACJ,CAAC;AAED,eAAe;EACblB,YAAY;EACZoB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}