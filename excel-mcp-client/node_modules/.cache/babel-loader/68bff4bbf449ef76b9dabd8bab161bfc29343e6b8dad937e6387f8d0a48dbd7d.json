{"ast":null,"code":"import axios from 'axios';\n\n// URL de votre endpoint RunPod (à remplacer par votre URL réelle)\nconst API_URL = 'https://api.runpod.ai/v2/b0h5t63skluh6d/run';\n// Pour les tests locaux, décommentez la ligne suivante:\n// const API_URL = 'http://localhost:8000';\n\n// Clé API RunPod (à stocker en sécurité dans un .env en production)\nconst API_KEY = 'rpa_DK0EL36X37FTK55LQENKHECC8PYYW8URSUNDTSJM19h72x';\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${API_KEY}`\n  }\n});\n\n/**\n * Appelle une commande MCP Excel\n * @param {string} command - Nom de la commande\n * @param {object} params - Paramètres de la commande\n * @returns {Promise} - Résultat de la commande\n */\nexport const callMcpCommand = async (command, params = {}) => {\n  try {\n    const response = await api.post('', {\n      input: {\n        command: command,\n        params: params\n      }\n    });\n\n    // RunPod renvoie généralement les données dans un format spécifique\n    if (response.data && response.data.output) {\n      return response.data.output;\n    }\n    return response.data;\n  } catch (error) {\n    console.error('API error:', error);\n    throw error;\n  }\n};\n\n/**\n * Vérifie le statut du serveur et la disponibilité d'Excel\n * @returns {Promise} - Statut du serveur et Excel\n */\nexport const checkMcpStatus = async () => {\n  try {\n    const response = await api.post('', {\n      input: {\n        command: 'mcp/status'\n      }\n    });\n    return response.data.output || {\n      success: false,\n      error: 'Réponse invalide'\n    };\n  } catch (error) {\n    console.error('Status check error:', error);\n    return {\n      success: false,\n      error: error.message || 'Erreur de connexion au serveur'\n    };\n  }\n};\n\n/**\n * Récupère la liste des classeurs Excel ouverts\n * @returns {Promise} - Liste des classeurs\n */\nexport const getOpenWorkbooks = async () => {\n  try {\n    const response = await callMcpCommand('mcp/workbooks');\n    return response;\n  } catch (error) {\n    console.error('Workbooks fetch error:', error);\n    throw error;\n  }\n};\n\n/**\n * Lit les données d'une feuille dans un classeur ouvert\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @returns {Promise} - Données de la feuille\n */\nexport const readSheetData = async (workbook, sheet) => {\n  try {\n    const response = await callMcpCommand('mcp/read_sheet', {\n      workbook: workbook,\n      sheet: sheet\n    });\n    return response;\n  } catch (error) {\n    console.error('Sheet read error:', error);\n    throw error;\n  }\n};\n\n/**\n * Analyse une feuille Excel avec embedding\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @param {string} query - Requête utilisateur\n * @param {number} topK - Nombre de résultats à retourner\n * @returns {Promise} - Résultat de l'analyse\n */\nexport const analyzeSheetWithEmbedding = async (workbook, sheet, query, topK = 5) => {\n  try {\n    const response = await callMcpCommand('mcp/analyze', {\n      workbook: workbook,\n      sheet: sheet,\n      query: query,\n      top_k: topK\n    });\n    return response;\n  } catch (error) {\n    console.error('Embedding analysis error:', error);\n    throw error;\n  }\n};\nexport default {\n  callMcpCommand,\n  checkMcpStatus,\n  getOpenWorkbooks,\n  readSheetData,\n  analyzeSheetWithEmbedding\n};","map":{"version":3,"names":["axios","API_URL","API_KEY","api","create","baseURL","headers","callMcpCommand","command","params","response","post","input","data","output","error","console","checkMcpStatus","success","message","getOpenWorkbooks","readSheetData","workbook","sheet","analyzeSheetWithEmbedding","query","topK","top_k"],"sources":["/Users/lilianrage/Library/Mobile Documents/com~apple~CloudDocs/ALYON/Produits/MCP_Server/excel-mcp-client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// URL de votre endpoint RunPod (à remplacer par votre URL réelle)\nconst API_URL = 'https://api.runpod.ai/v2/b0h5t63skluh6d/run';\n// Pour les tests locaux, décommentez la ligne suivante:\n// const API_URL = 'http://localhost:8000';\n\n// Clé API RunPod (à stocker en sécurité dans un .env en production)\nconst API_KEY = 'rpa_DK0EL36X37FTK55LQENKHECC8PYYW8URSUNDTSJM19h72x';\n\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${API_KEY}`\n  }\n});\n\n/**\n * Appelle une commande MCP Excel\n * @param {string} command - Nom de la commande\n * @param {object} params - Paramètres de la commande\n * @returns {Promise} - Résultat de la commande\n */\nexport const callMcpCommand = async (command, params = {}) => {\n  try {\n    const response = await api.post('', {\n      input: {\n        command: command,\n        params: params\n      }\n    });\n\n    // RunPod renvoie généralement les données dans un format spécifique\n    if (response.data && response.data.output) {\n      return response.data.output;\n    }\n    \n    return response.data;\n  } catch (error) {\n    console.error('API error:', error);\n    throw error;\n  }\n};\n\n/**\n * Vérifie le statut du serveur et la disponibilité d'Excel\n * @returns {Promise} - Statut du serveur et Excel\n */\nexport const checkMcpStatus = async () => {\n  try {\n    const response = await api.post('', {\n      input: {\n        command: 'mcp/status'\n      }\n    });\n    \n    return response.data.output || { success: false, error: 'Réponse invalide' };\n  } catch (error) {\n    console.error('Status check error:', error);\n    return { \n      success: false, \n      error: error.message || 'Erreur de connexion au serveur'\n    };\n  }\n};\n\n/**\n * Récupère la liste des classeurs Excel ouverts\n * @returns {Promise} - Liste des classeurs\n */\nexport const getOpenWorkbooks = async () => {\n  try {\n    const response = await callMcpCommand('mcp/workbooks');\n    return response;\n  } catch (error) {\n    console.error('Workbooks fetch error:', error);\n    throw error;\n  }\n};\n\n/**\n * Lit les données d'une feuille dans un classeur ouvert\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @returns {Promise} - Données de la feuille\n */\nexport const readSheetData = async (workbook, sheet) => {\n  try {\n    const response = await callMcpCommand('mcp/read_sheet', {\n      workbook: workbook,\n      sheet: sheet\n    });\n    return response;\n  } catch (error) {\n    console.error('Sheet read error:', error);\n    throw error;\n  }\n};\n\n/**\n * Analyse une feuille Excel avec embedding\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @param {string} query - Requête utilisateur\n * @param {number} topK - Nombre de résultats à retourner\n * @returns {Promise} - Résultat de l'analyse\n */\nexport const analyzeSheetWithEmbedding = async (workbook, sheet, query, topK = 5) => {\n  try {\n    const response = await callMcpCommand('mcp/analyze', {\n      workbook: workbook,\n      sheet: sheet,\n      query: query,\n      top_k: topK\n    });\n    return response;\n  } catch (error) {\n    console.error('Embedding analysis error:', error);\n    throw error;\n  }\n};\n\nexport default {\n  callMcpCommand,\n  checkMcpStatus,\n  getOpenWorkbooks,\n  readSheetData,\n  analyzeSheetWithEmbedding\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}