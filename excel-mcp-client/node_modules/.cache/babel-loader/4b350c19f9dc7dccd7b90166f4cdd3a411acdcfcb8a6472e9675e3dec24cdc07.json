{"ast":null,"code":"import axios from 'axios';\n\n// URL de l'agent local qui détecte les fichiers Excel ouverts\nconst LOCAL_AGENT_URL = 'http://localhost:8000';\n\n// URL du service RunPod qui fait tourner les modèles d'embedding\n// Utilisé en interne par l'agent local, pas directement par le frontend\nconst RUNPOD_URL = 'https://d2f1fb8chi27sh-8000.proxy.runpod.net';\n\n// Client API pour communiquer avec l'agent local\nconst localApi = axios.create({\n  baseURL: LOCAL_AGENT_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\n * Vérifie le statut de l'agent local et la disponibilité d'Excel\n * @returns {Promise} - Statut du service local et Excel\n */\nexport const checkLocalStatus = async () => {\n  try {\n    const response = await localApi.get('/status');\n    return response.data;\n  } catch (error) {\n    console.error('Status check error:', error);\n    return {\n      success: false,\n      error: error.message || 'Erreur de connexion au serveur local'\n    };\n  }\n};\n\n/**\n * Récupère la liste des classeurs Excel ouverts\n * @returns {Promise} - Liste des classeurs\n */\nexport const getOpenWorkbooks = async () => {\n  try {\n    const response = await localApi.get('/workbooks');\n    return response.data;\n  } catch (error) {\n    console.error('Workbooks fetch error:', error);\n    return {\n      success: false,\n      error: error.message || 'Erreur lors de la récupération des classeurs'\n    };\n  }\n};\n\n/**\n * Lit les données d'une feuille dans un classeur ouvert\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @returns {Promise} - Données de la feuille\n */\nexport const readSheetData = async (workbook, sheet) => {\n  try {\n    const response = await localApi.post('/read_sheet', {\n      workbook: workbook,\n      sheet: sheet\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Sheet read error:', error);\n    return {\n      success: false,\n      error: error.message || 'Erreur lors de la lecture de la feuille'\n    };\n  }\n};\n\n/**\n * Analyse une feuille Excel avec embedding sur RunPod\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @param {string} query - Requête utilisateur\n * @param {number} topK - Nombre de résultats à retourner\n * @returns {Promise} - Résultat de l'analyse\n */\nexport const analyzeSheetWithEmbedding = async (workbook, sheet, query, topK = 5) => {\n  try {\n    const response = await localApi.post('/analyze_sheet', {\n      workbook: workbook,\n      sheet: sheet,\n      query: query,\n      top_k: topK\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Embedding analysis error:', error);\n    return {\n      success: false,\n      error: error.message || 'Erreur lors de l\\'analyse avec embedding'\n    };\n  }\n};\n\n// Exporter toutes les fonctions\nexport default {\n  checkLocalStatus,\n  getOpenWorkbooks,\n  readSheetData,\n  analyzeSheetWithEmbedding\n};","map":{"version":3,"names":["axios","LOCAL_AGENT_URL","RUNPOD_URL","localApi","create","baseURL","headers","checkLocalStatus","response","get","data","error","console","success","message","getOpenWorkbooks","readSheetData","workbook","sheet","post","analyzeSheetWithEmbedding","query","topK","top_k"],"sources":["/Users/lilianrage/Library/Mobile Documents/com~apple~CloudDocs/ALYON/Produits/MCP_Server/excel-mcp-client/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// URL de l'agent local qui détecte les fichiers Excel ouverts\nconst LOCAL_AGENT_URL = 'http://localhost:8000';\n\n// URL du service RunPod qui fait tourner les modèles d'embedding\n// Utilisé en interne par l'agent local, pas directement par le frontend\nconst RUNPOD_URL = 'https://d2f1fb8chi27sh-8000.proxy.runpod.net';\n\n// Client API pour communiquer avec l'agent local\nconst localApi = axios.create({\n  baseURL: LOCAL_AGENT_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\n * Vérifie le statut de l'agent local et la disponibilité d'Excel\n * @returns {Promise} - Statut du service local et Excel\n */\nexport const checkLocalStatus = async () => {\n  try {\n    const response = await localApi.get('/status');\n    return response.data;\n  } catch (error) {\n    console.error('Status check error:', error);\n    return { \n      success: false, \n      error: error.message || 'Erreur de connexion au serveur local'\n    };\n  }\n};\n\n/**\n * Récupère la liste des classeurs Excel ouverts\n * @returns {Promise} - Liste des classeurs\n */\nexport const getOpenWorkbooks = async () => {\n  try {\n    const response = await localApi.get('/workbooks');\n    return response.data;\n  } catch (error) {\n    console.error('Workbooks fetch error:', error);\n    return {\n      success: false,\n      error: error.message || 'Erreur lors de la récupération des classeurs'\n    };\n  }\n};\n\n/**\n * Lit les données d'une feuille dans un classeur ouvert\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @returns {Promise} - Données de la feuille\n */\nexport const readSheetData = async (workbook, sheet) => {\n  try {\n    const response = await localApi.post('/read_sheet', {\n      workbook: workbook,\n      sheet: sheet\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Sheet read error:', error);\n    return {\n      success: false,\n      error: error.message || 'Erreur lors de la lecture de la feuille'\n    };\n  }\n};\n\n/**\n * Analyse une feuille Excel avec embedding sur RunPod\n * @param {string} workbook - Nom du classeur\n * @param {string} sheet - Nom de la feuille\n * @param {string} query - Requête utilisateur\n * @param {number} topK - Nombre de résultats à retourner\n * @returns {Promise} - Résultat de l'analyse\n */\nexport const analyzeSheetWithEmbedding = async (workbook, sheet, query, topK = 5) => {\n  try {\n    const response = await localApi.post('/analyze_sheet', {\n      workbook: workbook,\n      sheet: sheet,\n      query: query,\n      top_k: topK\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Embedding analysis error:', error);\n    return {\n      success: false,\n      error: error.message || 'Erreur lors de l\\'analyse avec embedding'\n    };\n  }\n};\n\n// Exporter toutes les fonctions\nexport default {\n  checkLocalStatus,\n  getOpenWorkbooks,\n  readSheetData,\n  analyzeSheetWithEmbedding\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,eAAe,GAAG,uBAAuB;;AAE/C;AACA;AACA,MAAMC,UAAU,GAAG,8CAA8C;;AAEjE;AACA,MAAMC,QAAQ,GAAGH,KAAK,CAACI,MAAM,CAAC;EAC5BC,OAAO,EAAEJ,eAAe;EACxBK,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAML,QAAQ,CAACM,GAAG,CAAC,SAAS,CAAC;IAC9C,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,OAAO;MACLE,OAAO,EAAE,KAAK;MACdF,KAAK,EAAEA,KAAK,CAACG,OAAO,IAAI;IAC1B,CAAC;EACH;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAY;EAC1C,IAAI;IACF,MAAMP,QAAQ,GAAG,MAAML,QAAQ,CAACM,GAAG,CAAC,YAAY,CAAC;IACjD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO;MACLE,OAAO,EAAE,KAAK;MACdF,KAAK,EAAEA,KAAK,CAACG,OAAO,IAAI;IAC1B,CAAC;EACH;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,aAAa,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,KAAK;EACtD,IAAI;IACF,MAAMV,QAAQ,GAAG,MAAML,QAAQ,CAACgB,IAAI,CAAC,aAAa,EAAE;MAClDF,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA;IACT,CAAC,CAAC;IACF,OAAOV,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC,OAAO;MACLE,OAAO,EAAE,KAAK;MACdF,KAAK,EAAEA,KAAK,CAACG,OAAO,IAAI;IAC1B,CAAC;EACH;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMM,yBAAyB,GAAG,MAAAA,CAAOH,QAAQ,EAAEC,KAAK,EAAEG,KAAK,EAAEC,IAAI,GAAG,CAAC,KAAK;EACnF,IAAI;IACF,MAAMd,QAAQ,GAAG,MAAML,QAAQ,CAACgB,IAAI,CAAC,gBAAgB,EAAE;MACrDF,QAAQ,EAAEA,QAAQ;MAClBC,KAAK,EAAEA,KAAK;MACZG,KAAK,EAAEA,KAAK;MACZE,KAAK,EAAED;IACT,CAAC,CAAC;IACF,OAAOd,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO;MACLE,OAAO,EAAE,KAAK;MACdF,KAAK,EAAEA,KAAK,CAACG,OAAO,IAAI;IAC1B,CAAC;EACH;AACF,CAAC;;AAED;AACA,eAAe;EACbP,gBAAgB;EAChBQ,gBAAgB;EAChBC,aAAa;EACbI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}